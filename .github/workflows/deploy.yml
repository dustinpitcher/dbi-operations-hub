name: üê≥ Deploy DBI Operations Hub via Docker to Azure

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AZURE_WEBAPP_NAME: dbi-operations-hub
  AZURE_RESOURCE_GROUP: dbi-operations-hub-rg

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: üì¶ Checkout code
      uses: actions/checkout@v4
    
    - name: üîç Validate Docker setup
      run: |
        echo "üîç Validating Dockerfile and dependencies..."
        
        # Check required files
        for file in Dockerfile requirements.txt wsgi.py app.py config.py; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Required file missing: $file"
            exit 1
          fi
          echo "‚úÖ Found: $file"
        done
        
        # Check utils directory
        if [ ! -d "utils" ]; then
          echo "‚ùå Utils directory missing"
          exit 1
        fi
        echo "‚úÖ Utils directory present"
        
        # Validate Dockerfile syntax
        docker --version
        echo "‚úÖ Docker validation completed"
    
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: üîë Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: üè∑Ô∏è Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=DBI Operations Hub
          org.opencontainers.image.description=Comprehensive business operations platform
          org.opencontainers.image.vendor=Dirty Bird Industries
    
    - name: üî® Build and test Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true
    
    - name: üß™ Test Docker container
      run: |
        echo "üß™ Testing Docker container functionality..."
        
        # Get the built image tag
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "Testing image: $IMAGE_TAG"
        
        # Run container in background for testing
        docker run -d \
          --name test-container \
          --env FLASK_ENV=production \
          --env SECRET_KEY=test-key-for-container-validation-only \
          --env LOG_LEVEL=INFO \
          --env PORT=8000 \
          --publish 8080:8000 \
          --health-start-period=30s \
          "$IMAGE_TAG"
        
        echo "‚è≥ Waiting for container to start..."
        sleep 30
        
        # Check container status
        echo "üìã Container status:"
        docker ps | grep test-container || echo "Container not running"
        
        echo "üìã Container logs (last 20 lines):"
        docker logs --tail 20 test-container
        
        # Test health endpoint with better debugging
        echo "üè• Testing health endpoint..."
        MAX_ATTEMPTS=6
        for i in $(seq 1 $MAX_ATTEMPTS); do
          echo "üîç Health check attempt $i/$MAX_ATTEMPTS..."
          
          # Test with curl and show response
          RESPONSE=$(curl -s -m 15 http://localhost:8080/health 2>&1)
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -m 15 http://localhost:8080/health 2>/dev/null)
          
          echo "HTTP Code: $HTTP_CODE"
          echo "Response: $RESPONSE"
          
          if [[ "$RESPONSE" == *'"status": "healthy"'* ]]; then
            echo "‚úÖ Container health check passed!"
            break
          else
            if [ $i -eq $MAX_ATTEMPTS ]; then
              echo "‚ùå Container health check failed after $MAX_ATTEMPTS attempts"
              echo "üìã Final container logs:"
              docker logs test-container
              exit 1
            else
              echo "‚è≥ Retrying in 10 seconds..."
              sleep 10
            fi
          fi
        done
        
        # Test dashboard endpoint
        echo "üß™ Testing dashboard endpoint..."
        if curl -f -s -m 10 http://localhost:8080/ > /dev/null 2>&1; then
          echo "‚úÖ Dashboard endpoint: Responding"
        else
          echo "‚ö†Ô∏è Dashboard endpoint: Not responding (may be normal for test)"
        fi
        
        # Cleanup test container
        docker stop test-container || true
        docker rm test-container || true
        
        echo "‚úÖ Container testing completed successfully"
    
    - name: üöÄ Push Docker image to registry
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    environment:
      name: 'production'
      url: https://dbi-operations-hub.azurewebsites.net

    steps:
    - name: üîë Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: üê≥ Deploy container to Azure App Service
      run: |
        echo "üöÄ Deploying Docker container to Azure App Service..."
        
        # Configure App Service for container deployment
        az webapp config container set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --docker-custom-image-name ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          --docker-registry-server-url https://${{ env.REGISTRY }} \
          --docker-registry-server-user ${{ github.actor }} \
          --docker-registry-server-password ${{ secrets.GITHUB_TOKEN }}
        
        # Configure production environment variables
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --settings \
            FLASK_ENV=production \
            LOG_LEVEL=INFO \
            WEBSITES_PORT=8000 \
            WEBSITES_ENABLE_APP_SERVICE_STORAGE=true \
            DOCKER_REGISTRY_SERVER_URL=https://${{ env.REGISTRY }} \
            DOCKER_REGISTRY_SERVER_USERNAME=${{ github.actor }}
        
        echo "‚úÖ Container configuration completed"
    
    - name: üîÑ Restart Azure App Service
      run: |
        echo "üîÑ Restarting App Service to deploy new container..."
        az webapp restart \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
        echo "‚úÖ App Service restart initiated"
    
    - name: üè• Comprehensive health verification
      run: |
        echo "‚è≥ Waiting for deployment to stabilize..."
        sleep 90
        
        echo "üè• Running comprehensive health verification..."
        BASE_URL="https://dbi-operations-hub.azurewebsites.net"
        HEALTH_URL="$BASE_URL/health"
        
        # Extended health check with multiple attempts
        for attempt in {1..12}; do
          echo "üîç Health check attempt $attempt/12..."
          
          if HEALTH_RESPONSE=$(curl -f -s -m 30 "$HEALTH_URL" 2>/dev/null); then
            echo "üìä Health response received"
            
            if echo "$HEALTH_RESPONSE" | grep -q '"status": "healthy"'; then
              echo "‚úÖ Health check PASSED!"
              echo "üìã Health data: $HEALTH_RESPONSE"
              
              # Test critical endpoints
              echo "üß™ Testing critical application endpoints..."
              
              # Dashboard
              if curl -f -s -m 15 "$BASE_URL/" > /dev/null 2>&1; then
                echo "‚úÖ Dashboard: Responding"
              else
                echo "‚ö†Ô∏è Dashboard: Not responding"
              fi
              
              # Assembly module
              if curl -f -s -m 15 "$BASE_URL/assembly/" > /dev/null 2>&1; then
                echo "‚úÖ Assembly Module: Responding"
              else
                echo "‚ö†Ô∏è Assembly Module: Not responding"
              fi
              
              # Purchase Orders module
              if curl -f -s -m 15 "$BASE_URL/po/" > /dev/null 2>&1; then
                echo "‚úÖ Purchase Orders Module: Responding"
              else
                echo "‚ö†Ô∏è Purchase Orders Module: Not responding"
              fi
              
              echo "üéâ Deployment health verification COMPLETED!"
              break
            else
              echo "‚ö†Ô∏è Health endpoint responding but status is not healthy"
              echo "üìã Response: $HEALTH_RESPONSE"
            fi
          else
            echo "‚ö†Ô∏è Health endpoint not responding"
          fi
          
          if [ $attempt -eq 12 ]; then
            echo "‚ùå Health verification FAILED after 12 attempts"
            echo "üìã Attempting to fetch application logs..."
            
            # Try to get some diagnostic information
            az webapp log download \
              --name ${{ env.AZURE_WEBAPP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --log-file deployment-logs.zip || echo "Could not fetch logs"
            
            exit 1
          else
            echo "‚è≥ Retrying in 15 seconds..."
            sleep 15
          fi
        done
    
    - name: üéä Deployment Success Summary
      run: |
        echo "üéâ üéâ DBI OPERATIONS HUB DEPLOYMENT SUCCESSFUL! üéâ üéâ"
        echo ""
        echo "üê≥ Container Details:"
        echo "  üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "  üîß Runtime: Python 3.9 with Gunicorn"
        echo "  üõ°Ô∏è Security: Enhanced with comprehensive validation"
        echo ""
        echo "üåê Application Access:"
        echo "  üè† Main Dashboard: https://dbi-operations-hub.azurewebsites.net"
        echo "  üè≠ Assembly Management: https://dbi-operations-hub.azurewebsites.net/assembly/"
        echo "  üí∞ Purchase Orders: https://dbi-operations-hub.azurewebsites.net/po/"
        echo "  üö´ Supplier Management: https://dbi-operations-hub.azurewebsites.net/po/manage-suppliers"
        echo ""
        echo "üîß Administrative Endpoints:"
        echo "  üìä Health Check: https://dbi-operations-hub.azurewebsites.net/health"
        echo "  üßπ Manual Cleanup: https://dbi-operations-hub.azurewebsites.net/system/cleanup"
        echo ""
        echo "‚ú® Enhanced Features Active:"
        echo "  üîê File upload security validation"
        echo "  üìä Structured logging and monitoring"  
        echo "  üö® Error alerting system"
        echo "  üßπ Automated file cleanup service"
        echo "  üõ°Ô∏è Environment validation and safeguards"